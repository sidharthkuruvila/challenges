* Load input into sqlite

#+begin_src awk :in-file ../../input/day01/input.txt :results value file :file input.csv
  BEGIN {
      line_id = 1
  }

  {
      for(i = 1; i<=length($0);i++){
          print line_id","i","substr($0,i,1)
      }
      line_id++
  }
#+end_src

#+RESULTS:
[[file:input.csv]]

Load csv file into a table




#+begin_src sqlite :db ./day01.db
  drop table if exists input;	
  create table input(line_id int, char_id int,  chr string);
  .mode csv input
  .import input.csv input
#+end_src

#+RESULTS:

#+begin_src sqlite :db ./day01.db :colnames yes :exports both
  select * from input limit 10
#+end_src

#+RESULTS:
| line_id | char_id | chr |
|---------+---------+-----|
|       1 |       1 | 9   |
|       1 |       2 | e   |
|       1 |       3 | i   |
|       1 |       4 | g   |
|       1 |       5 | h   |
|       1 |       6 | t   |
|       1 |       7 | o   |
|       1 |       8 | n   |
|       1 |       9 | e   |
|       2 |       1 | h   |

* Part 1

Filter out non digit characters from each line

#+begin_src sqlite :db ./day01.db
drop table if exists ints;
create table ints as
select line_id, char_id, chr
from input
where chr >= '0'
  and chr <= '9'
#+end_src

#+RESULTS:

#+begin_src sqlite :db ./day01.db :colnames yes :exports both
  select group_concat(chr) from ints group by line_id limit 10
#+end_src

#+RESULTS:
| group_concat(chr) |
|-------------------|
| 9                 |
| 3,5,4             |
| 9                 |
| 8,8,6             |
| 6,2               |
| 2,3,4             |
| 2,8               |
| 2,2,3             |
| 2                 |
| 7,8,1,9,7,2,6     |

Find the first digit that appears in each line

#+begin_src sqlite :db ./day01.db
drop table if exists minimums;
create table minimums as
with min_char_id(line_id, char_id) as (select line_id, min(char_id) from ints group by line_id)
select line_id, chr
from ints
         join min_char_id using (line_id, char_id)
#+end_src	

#+RESULTS:

#+begin_src sqlite :db ./day01.db :colnames yes :exports both
  select line_id, chr from minimums  limit 10
#+end_src

#+RESULTS:
| line_id | chr |
|---------+-----|
|       1 |   9 |
|       2 |   3 |
|       3 |   9 |
|       4 |   8 |
|       5 |   6 |
|       6 |   2 |
|       7 |   2 |
|       8 |   2 |
|       9 |   2 |
|      10 |   7 |

Find the last digit that appears in each line

#+begin_src sqlite :db ./day01.db
drop table if exists maximums;
create table maximums as
with min_char_id(line_id, char_id) as (select line_id, max(char_id) from ints group by line_id)
select line_id, chr
from ints
         join min_char_id using (line_id, char_id)
#+end_src	

#+RESULTS:

#+begin_src sqlite :db ./day01.db :colnames yes :exports both
  select line_id, chr from maximums  limit 10
#+end_src

#+RESULTS:
| line_id | chr |
|---------+-----|
|       1 |   9 |
|       2 |   4 |
|       3 |   9 |
|       4 |   6 |
|       5 |   2 |
|       6 |   4 |
|       7 |   8 |
|       8 |   3 |
|       9 |   2 |
|      10 |   6 |


Construct minimum-maximum pairs

#+begin_src sqlite :db ./day01.db
drop table if exists pairs;
create table pairs as
select line_id, cast(mn.chr || mx.chr as int) as pair
from maximums as mx
         join minimums as mn using (line_id)
#+end_src	

#+RESULTS:

#+begin_src sqlite :db ./day01.db :colnames yes :exports both
  select line_id, pair from pairs  limit 10
#+end_src

#+RESULTS:
| line_id | pair |
|---------+------|
|       1 |   99 |
|       2 |   34 |
|       3 |   99 |
|       4 |   86 |
|       5 |   62 |
|       6 |   24 |
|       7 |   28 |
|       8 |   23 |
|       9 |   22 |
|      10 |   76 |


Calculate the sum of all pairs

 #+begin_src sqlite :db ./day01.db :colnames yes :exports both
select sum(pair)  as Result from pairs
#+end_src

#+RESULTS:
| Result |
|--------|
|  55477 |


* Part 2

Create a table to map numeric and word strings to digits

#+begin_src sqlite :db ./day01.db
drop table if exists digits;
create table digits as
with digits(label, digit) as (values ('one', 1),
                                     ('two', 2),
                                     ('three', 3),
                                     ('four', 4),
                                     ('five', 5),
                                     ('six', 6),
                                     ('seven', 7),
                                     ('eight', 8),
                                     ('nine', 9))
select *
from digits
union
select cast(digit as string), digit
from digits
#+end_src

#+RESULTS:

#+begin_src sqlite :db ./day01.db :colnames yes :exports both
  select * from digits
#+end_src

#+RESULTS:
| label | digit |
|-------+-------|
| 1     |     1 |
| 2     |     2 |
| 3     |     3 |
| 4     |     4 |
| 5     |     5 |
| 6     |     6 |
| 7     |     7 |
| 8     |     8 |
| 9     |     9 |
| eight |     8 |
| five  |     5 |
| four  |     4 |
| nine  |     9 |
| one   |     1 |
| seven |     7 |
| six   |     6 |
| three |     3 |
| two   |     2 |

Construct substrings
#+begin_src sqlite :db ./day01.db
drop table if exists substrings;
create table substrings as
select line_id, char_id, group_concat(chr, '') over ( partition by line_id order by char_id  range between current row and 4 following)  as substring
from input
#+end_src	  

#+RESULTS:

#+begin_src sqlite :db ./day01.db :colnames yes :exports both
  select * from substrings limit 10
#+end_src

#+RESULTS:
| line_id | char_id | substring |
|---------+---------+-----------|
|       1 |       1 | 9eigh     |
|       1 |       2 | eight     |
|       1 |       3 | ighto     |
|       1 |       4 | ghton     |
|       1 |       5 | htone     |
|       1 |       6 | tone      |
|       1 |       7 | one       |
|       1 |       8 | ne        |
|       1 |       9 | e         |
|       2 |       1 | hczsq     |


Use the substrings table to search for digits

#+begin_src sqlite :db ./day01.db
  drop table if exists digit_positions;
  create table digit_positions as
    select line_id , char_id as digit_position, digit as digit_value
    from substrings
    join digits on substr(substring, 0, length(label)+1) like label
#+end_src  

#+RESULTS:

#+begin_src sqlite :db ./day01.db :colnames yes :exports both
select * from digit_positions limit 10
#+end_src

#+RESULTS:
| line_id | digit_position | digit_value |
|---------+----------------+-------------|
|       1 |              1 |           9 |
|       1 |              2 |           8 |
|       1 |              7 |           1 |
|       2 |              6 |           4 |
|       2 |             10 |           3 |
|       2 |             14 |           5 |
|       2 |             15 |           7 |
|       2 |             20 |           4 |
|       3 |              1 |           9 |
|       3 |              2 |           2 |



  Find the first digit that appears in each line

#+begin_src sqlite :db ./day01.db
drop table if exists part2_minimums;
create table part2_minimums as
with min_char_id(line_id, digit_position) as (select line_id, min(digit_position) from digit_positions group by line_id)
select line_id, digit_value
from digit_positions
         join min_char_id using (line_id, digit_position)
#+end_src	

#+RESULTS:

#+begin_src sqlite :db ./day01.db :colnames yes :exports both
  select * from part2_minimums  limit 10
#+end_src

#+RESULTS:
| line_id | digit_value |
|---------+-------------|
|       1 |           9 |
|       2 |           4 |
|       3 |           9 |
|       4 |           8 |
|       5 |           2 |
|       6 |           9 |
|       7 |           2 |
|       8 |           2 |
|       9 |           2 |
|      10 |           7 |

Find the last digit that appears in each line

#+begin_src sqlite :db ./day01.db
drop table if exists part2_maximums;
create table part2_maximums as
with min_char_id(line_id, digit_position) as (select line_id, max(digit_position)
                                   from digit_positions
                                   group by line_id)
select line_id, digit_value
from digit_positions
         join min_char_id using (line_id, digit_position)
#+end_src	

#+RESULTS:

#+begin_src sqlite :db ./day01.db :colnames yes :exports both
  select * from part2_maximums  limit 10
#+end_src

#+RESULTS:
| line_id | digit_value |
|---------+-------------|
|       1 |           1 |
|       2 |           4 |
|       3 |           1 |
|       4 |           3 |
|       5 |           5 |
|       6 |           4 |
|       7 |           7 |
|       8 |           3 |
|       9 |           2 |
|      10 |           6 |


Construct minimum-maximum pairs

#+begin_src sqlite :db ./day01.db
drop table if exists part2_pairs;
create table part2_pairs as
select line_id, mn.digit_value * 10 + mx.digit_value as pair
from part2_maximums as mx
         join part2_minimums as mn using (line_id)
#+end_src	

#+RESULTS:

#+begin_src sqlite :db ./day01.db :colnames yes :exports both
  select line_id, pair from part2_pairs  limit 10
#+end_src

#+RESULTS:
| line_id | pair |
|---------+------|
|       1 |   91 |
|       2 |   44 |
|       3 |   91 |
|       4 |   83 |
|       5 |   25 |
|       6 |   94 |
|       7 |   27 |
|       8 |   23 |
|       9 |   22 |
|      10 |   76 |

Calculate the sum of all pairs

 #+begin_src sqlite :db ./day01.db :colnames yes :exports both
select sum(pair)  as Result from part2_pairs
#+end_src

#+RESULTS:
| Result |
|--------|
|  54431 |

This one is completely wrong. I don't know how I got the right result.
