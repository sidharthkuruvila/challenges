* Load input into sqlite

#+begin_src awk :in-file ../../input/day04/input.txt
  BEGIN{
      row = 1
      printf "" > "winning_numbers.csv"
      printf "" > "numbers_you_have.csv"
  }
  {
      i = 3

      while($i != "|" ) {
          print row","i","$i >> "winning_numbers.csv"
          i++
      }
      i++
      s = i
      while(i <= NF){
          print row","(i - s + 1)","$i >> "numbers_you_have.csv"
          i++
      }
      row++
  }
#+end_src

#+RESULTS:

Load csv file into a table




#+begin_src sqlite :db ./day04.db
  drop table if exists winning_numbers;	
  create table winning_numbers(card_id int, col_id int,  number int);
  .mode csv winning_numbers
  .import winning_numbers.csv winning_numbers
#+end_src

#+RESULTS:

#+begin_src sqlite :db ./day04.db :colnames yes :exports both
  select * from winning_numbers limit 10
#+end_src

#+RESULTS:
| card_id | col_id | number |
|---------+--------+--------|
|       1 |      3 |     34 |
|       1 |      4 |     50 |
|       1 |      5 |     18 |
|       1 |      6 |     44 |
|       1 |      7 |     19 |
|       1 |      8 |     35 |
|       1 |      9 |     47 |
|       1 |     10 |     62 |
|       1 |     11 |     65 |
|       1 |     12 |     26 |

#+begin_src sqlite :db ./day04.db
  drop table if exists numbers_you_have;	
  create table numbers_you_have(card_id int, col_id int,  number int);
  .mode csv numbers_you_have
  .import numbers_you_have.csv numbers_you_have
#+end_src

#+RESULTS:

#+begin_src sqlite :db ./day04.db :colnames yes :exports both
  select * from numbers_you_have limit 10
#+end_src

#+RESULTS:
| card_id | col_id | number |
|---------+--------+--------|
|       1 |      1 |     63 |
|       1 |      2 |      6 |
|       1 |      3 |     27 |
|       1 |      4 |     15 |
|       1 |      5 |     60 |
|       1 |      6 |      9 |
|       1 |      7 |     98 |
|       1 |      8 |      3 |
|       1 |      9 |     61 |
|       1 |     10 |     89 |


Find to count of your winning numbers for each card



#+begin_src sqlite :db ./day04.db
drop table if exists your_win_count;
create table your_win_count as
with cards(card_id) as (select distinct card_id from numbers_you_have),
     card_counts(card_id, count) as
         (select card_id as card_id, count(*) as count
          from winning_numbers as wn
                   join numbers_you_have as nyh
                        using (card_id, number)
          group by card_id)
select card_id,
       case
           when count is null then 0
           else count
           end as count
from cards
         left join card_counts using (card_id)
#+end_src

#+RESULTS:

#+begin_src sqlite :db ./day04.db :colnames yes :exports both
  select * from your_win_count limit 10
#+end_src

#+RESULTS:
| card_id | count |
|---------+-------|
|       1 |     0 |
|       2 |    10 |
|       3 |     8 |
|       4 |     1 |
|       5 |    10 |
|       6 |    10 |
|       7 |    10 |
|       8 |     5 |
|       9 |    10 |
|      10 |    10 |


* Part 1


#+begin_src sqlite :db ./day04.db
  select sum(1 << (count - 1)) from your_win_count
#+end_src

#+RESULTS:
: 23678


* Part 2


Find out which card  copying of other cards

#+begin_src sqlite :db ./day04.db
  drop table if exists card_impacts;
  create table card_impacts as     
  select p.card_id as parent_card, l.card_id as child_card  from your_win_count l
         join your_win_count p where l.card_id >  p.card_id  and l.card_id <=  p.card_id + p.count
#+end_src

#+RESULTS:


#+begin_src sqlite :db ./day04.db  :colnames yes :exports both
  select * from card_impacts  order by parent_card limit 10
#+end_src

#+RESULTS:
| parent_card | child_card |
|-------------+------------|
|           2 |          3 |
|           2 |          4 |
|           2 |          5 |
|           2 |          6 |
|           2 |          7 |
|           2 |          8 |
|           2 |          9 |
|           2 |         10 |
|           2 |         11 |
|           2 |         12 |


#+begin_src sqlite :db ./day04.db   :colnames yes :exports both
  with cards(card_id) as (select distinct card_id
                          from numbers_you_have
                          order by card_id),
       card_counts_ungrouped(card_id) as (select card_id
                                                 from cards
                                                 union all
                                                 select child_card as card_id
                                                 from card_counts_ungrouped
                                                          join card_impacts on parent_card = card_id
                                                 order by card_id),
       card_counts(card_id, count) as (select card_id, count(*) from card_counts_ungrouped group by card_id)
       sum_counts(count) as (select sum(count) from card_counts)
  select count as Result
  from sum_counts
#+end_src

#+RESULTS:
| card_id | count |
|---------+-------|
|       1 |     1 |
|       2 |     1 |
|       3 |     2 |
|       4 |     4 |
|       5 |     8 |
|       6 |    12 |
|       7 |    24 |
|       8 |    48 |
|       9 |    96 |
|      10 |   192 |
